# Feature: Surah List, Audio Configuration Modal & Floating Action Button Player

---

## Purpose
Provide users with a complete audio playback flow for Quran memorization:  
1. Browse and search Surahs.  
2. Configure audio preferences before playback.  
3. Play and control Surah audio via a docked player.  

---

## UI Components

### 1. Navigation Bar
* Global navigation menus:
  * **Home**
  * **Favorites**
  * **Settings**
* **Floating Action Button (FAB)** – Player control (bottom-right).

---

### 2. Surah List
* **Scrollable list of 114 Surahs**.  
* Each row must include:
  * Surah number
  * Surah name (Arabic)
  * Surah name (Translation - user’s selected language)
  * Favorite toggle ♥️  

#### Favorite Toggle Behavior:
* Default icon: Empty heart outline (<img src="image.png" alt="not favorite" width="20" height="20">)  
* When marked as favorite: Filled heart (<img src="image-1.png" alt="favorite" width="30" height="30">)  

#### Search Bar
* Filters Surahs by:
  * Surah number
  * Surah name (Arabic)
  * Surah name (Translation – exact string match only)

#### Surah Selection
* Clicking a Surah opens the **Audio Configuration Modal**.  

---

### 3. Audio Configuration Modal
* **Range Picker**: From Surah/Ayah → To Surah/Ayah  
* **Arabic Reciter** (fetched from API)  
* **Translation Language** (English, Tamil, Urdu)  
* **Translation Version** (configurable per language)  
* **Playback Speed** (0.5x, 1x, 1.5x, 2x)  
* **Buttons**:
  * **Play (Primary CTA)** → navigates to Player  
  * **Cancel (Secondary CTA)** → dismiss modal  

#### Behavior
* Modal pre-populates with last-used settings (if session not terminated).  
* If FAB state is `Play` (state1) → Modal opens when clicked.  
* Preferences are **not persisted** if playback is fully stopped by user.  
* If minimized, playback resumes or is available in docked player.  

---

### 4. Floating Action Button (FAB)
#### States
1. **State1** – Play icon: No playback session → clicking opens Audio Config Modal.  
2. **State2** – Icon2 (paused session): A session exists but playback is paused.  
   * Clicking opens docked Player with paused session.  
   * User may resume, stop, or relaunch Audio Config Modal for new session.  
3. **State3** – Pause icon: Active playback in progress.  
   * Clicking opens docked Player with currently playing session.  

---

### 5. Docked Player (Bottom Panel)
*(Right-most wireframe in screenshot `2067beec-89c0-425d-88cb-82a074e81883.png`)*

#### Components
* **Top Bar**: Back navigation + Surah/Ayah range title  
* **Controls**: Play/Pause toggle, Next verse, Previous verse  
* **Playback Speed**: dropdown selector  
* **Progress Bar**: Verse-level progress tracking  
* **Docked Layout**: Always bottom-aligned, no full-screen takeover  

#### Audio Logic
* Within each verse: Arabic → 300ms pause → Translation  
* Between verses: Translation (prev) → 500ms pause → Arabic (next)  
* Playback runs once (no loop).  
* Audio files (Arabic + Translation) fetched from API with background caching.  

---

## Behavior Summary

1. **Surah List → Modal → Player**  
   * User selects Surah → Modal opens → configures settings → playback starts in docked Player.  

2. **FAB → Modal/Player**  
   * State1 (Play icon): Opens Modal.  
   * State2 (Paused): Opens docked Player with paused session.  
   * State3 (Playing): Opens docked Player with active playback.  

3. **Persistence Rules**  
   * Stop button → terminate session, reset FAB to Play state.  
   * Pause button + exit → minimize Player, show Icon2 (paused).  
   * Exit without pause/stop → playback continues in background, show Pause icon.  

---

## Visual Style
* Must follow project theme defined in:  
  * `lib>utils>theme.dart`  

---

## Wireframe References
* **Surah List & FAB:** Left and middle screens in screenshot.  
* **Audio Config Modal:** Middle screen in screenshot.  
* **Docked Player:** Right-most screen in screenshot.  
![alt text](image.png)
---

## Developer Notes
* **Reciters**: Must be fetched dynamically from API.  
* **Translations**: Configurable per language, confirm mapping at runtime.  
* **Audio API**: All playback streams fetched via API (Arabic + Translation).  
* **Caching**: Temporary background caching only (not persisted across sessions).  
* **Search**: Exact match only for MVP (no fuzzy).  
